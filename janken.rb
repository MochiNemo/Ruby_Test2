#******************************************************************************************************************************
# クラス定義
#******************************************************************************************************************************
#-------------------------------------#
# じゃんけん親クラス									#
#-------------------------------------#
	class Battle
	#-------------------------------------#
	# 初期化処理													#
	#-------------------------------------#
	def initialize(battleType, choices, call, alert)
		@@player	 	= {"自分" => 0, "相手" => 0}																	# プレイやー(自分、相手)を定義
		@@call			= call																												# 掛け声文字列
		@@border		= "\n--------------------------------------------------\n"	# 区切り用文字列
		@hand			= []																														# 選択肢を入れる箱を用意
		@battleType	= battleType																									# じゃんけん、あいこ、あっち向いてホイのいずれかの文字列
		@choices		= choices																											# 選択肢の表示文字列
		@alert			= alert 																											# 警告文字列
		@selectVol 	= 0																														# 選択肢の数を初期化
	end

	#-------------------------------------#
	# ユーザー選択												#
	#-------------------------------------#
	def select_num
		puts @@border + "\n" + @battleType + "\n" + @choices											# じゃんけん、あっち向いてホイを始める際の表示文字列
		inptNum = gets.chomp																											# 選択番号を入力
		if inptNum == "0" ||  inptNum == "1" || inptNum == "2" || inptNum == "3"	# 正しい選択肢を入力していた場合
			@@player["自分"] = inptNum.to_i																					# 入力を整数値に変換
		else																																			# 選択肢外を入力した場合
			@@player["自分"] = 99																										# 選択肢に99を入れておく(以降の処理で条件分岐で偽にする為)
			puts @alert																															# 警告を表示
		end
		return @@player["自分"]																										# 選択番号を返す
	end

	#-------------------------------------#
	# 相手の手をランダム生成							#
	#-------------------------------------#
	def enemy_num
		@@player["相手"] = rand(1..@selectVol) - 1																# 相手の出す手を乱数生成
		puts @@call + "\n" + @@border + "\n"																			# 掛け声＋区切りを表示
	end

	#-------------------------------------#
	# 自分と相手の手を表示								#
	#-------------------------------------#
	def	disp_choices
		puts "あなた：#{@hand[@@player["自分"]]}"																	# 自分の手を表示
		puts "相手　：#{@hand[@@player["相手"]]}\n"																# 相手の手を表示
	end
end

#-------------------------------------#
# じゃんけん子クラス(じゃんけん)			#
#-------------------------------------#
class Janken < Battle
	#-------------------------------------#
	# 初期化処理													#
	#-------------------------------------#
	def initialize(battleType, choices, call, alert)
		super(battleType, choices, call, alert)																		# 継承
		@hand = ["グー", "チョキ", "パー"]																				# 選択肢をじゃんけん用に再定義
		@selectVol = 3																														# ランダム生成用の整数範囲を1~3にする
	end

	#-------------------------------------#
	# じゃんけん判定											#
	#-------------------------------------#
	def jadge
		jankenResult = [true, 0]																									# リターン用の変数定義(定義時はじゃんけん終了フラグをセット)
		jadgeNum = @@player["自分"] - @@player["相手"]														# 自分の手と相手の手の差分を取る
		if (jadgeNum == -1 || jadgeNum == 2)																			# 差分が-1 or 2のとき
			jankenResult[1] = 1																											# 結果に1(勝ち)を格納
		elsif (jadgeNum == -2 || jadgeNum == 1)																		# 差分が-2 or 1 のとき
			jankenResult[1] = 2																											# 結果に1(負け)を格納
		elsif jadgeNum == 0																												# 差分が0のとき
			jankenResult[1] = 3																											# 結果に1(あいこ)を格納
			jankenResult[0] = false																									# じゃんけんの終了フラグアンセット
		else
			#何もしない
		end
		return jankenResult																												# 結果を返す
	end
end

#-------------------------------------#
# じゃんけん子クラス(あっち向いてホイ)#
#-------------------------------------#
class Look < Battle
	#-------------------------------------#
	# 初期化処理													#
	#-------------------------------------#
	def initialize(battleType, choices, call, alert)
		super(battleType, choices, call, alert)																		# 継承
		@hand = ["上", "下", "左", "右"]																					# 選択肢をあっち向いてホイ用に再定義
		@selectVol = 4																														# ランダム生成用の整数範囲を1~4にする
	end

	#-------------------------------------#
	# あっち向いてホイ判定								#
	#-------------------------------------#	
	def jadge(jankenResult)
		lookResult = true																													# リターン用の判定結果をtrueで初期化
		if @@player["自分"] == @@player["相手"]																		# 自分と相手の手が同じなら
			puts ""
			puts 		"//////////////"
			if jankenResult == 1																										# じゃんけんで自分が勝っていた場合
				puts 	"/あなたの勝ち/"																								# 自分の勝ちを表示
			else																																		# じゃんけんで相手が勝っていた場合
				puts 	"/相手の勝ち /"																									# 相手の勝ちを表示
			end
			puts 		"//////////////"
		else																																			# 自分と相手の手が違う場合
			lookResult = false																											# 判定結果をfalseに変更(じゃんけんをやり直す)
		end
		return lookResult																													# 判定結果をリターン
	end
end

#******************************************************************************************************************************
# 変数定義#******************************************************************************************************************************
endFlag 				= false																																		# じゃんけんの終了フラグ
choiceHand 			= 0																																				# 出した手
jankenFlag 			= 0																																				# じゃんけん or あいこ
jankenResult 		= [false, 0]																															# じゃんけん結果配列[じゃんけん終了フラグ(あいこのみtrue), 勝敗]
choiceLook 			= 0																																				# 向いた方向
dispBattleType 	= ["じゃんけん...", "あいこで...", "あっち向いて〜"]											# 最初の掛け声
dispChoice 			= ["0(グー) 1(チョキ) 2(パー) 3(戦わない)", "0(上) 1(下) 2(左) 3(右)"]		# 選択肢
dispCall 				= ["ホイ!", "ショ！"]																											# 選択後の掛け声
dispAlert 			= "0~3(半角)で選択してください"																						# 入力エラー表示

#******************************************************************************************************************************
# インスタンス定義
#******************************************************************************************************************************
janken	= Janken.new(dispBattleType[0], dispChoice[0], dispCall[0], dispAlert)						# 通常じゃんけんのインスタンス
aiko		= Janken.new(dispBattleType[1], dispChoice[0], dispCall[1], dispAlert)						# あいこのインスタンス
jankens = [janken, aiko]																																	# 子クラスをまとめる
look 		= Look.new(dispBattleType[2], dispChoice[1], dispCall[0], dispAlert)							# あっち向いてホイのインスタンス

#******************************************************************************************************************************
# じゃんけんの処理を開始
#******************************************************************************************************************************
until endFlag do																																					# 終了フラグがtrueになるまでループ
	#-------------------------------------#
	# じゃんけん実行体										#
	#-------------------------------------#
	until jankenResult[0] do																																# じゃんけんがあいこである間ループ
		jankenResult[1] = 0																																		# じゃんけんの結果を初期化
		choiceHand = jankens[jankenFlag].select_num()																					# じゃんけんの選択肢を入力＆入力結果を変数に格納
		if choiceHand < 3																																			# 選択肢が3以外の場合
			jankens[jankenFlag].enemy_num()																											# 相手の手をランダム生成
			jankens[jankenFlag].disp_choices()																									# 自分の手と相手の手を表示
			jankenResult = jankens[jankenFlag].jadge()																					# じゃんけんの判定＆結果を配列に格納
			if jankenResult[1] == 3																															# あいこの場合
				jankenFlag = 1																																		# 次回からあいこ用のインスタンスを使用
			else																																								# あいこ以外
				#何もしない
			end
		else																																									# 選択肢が3または正しい選択肢を選んでいない場合
			puts "\n--------------------------------------------------"													# 区切り表示
			jankenResult[0] = true																															# 強制的にじゃんけんの終了フラグをtrueにする
		end
	end
	jankenResult[0] = false																																	# じゃんけんのループを抜けた為、終了フラグをクリア
	jankenFlag 			= 0																																			# 通常のじゃんけん時かあいこ時かのフラグをクリア
	#-------------------------------------#
	# あっち向いてホイ実行体							#
	#-------------------------------------#
	if jankenResult[1] == 1 || jankenResult[1] == 2																					# じゃんけんの勝敗がついた場合
		choiceLook = look.select_num()																												# あっち向いてホイの選択肢を入力＆変数に格納
		if choiceLook == 0 || choiceLook == 1 || choiceLook == 2 || choiceLook == 3						# 選択肢が0~3の場合
			look.enemy_num()																																		# 相手の手をランダム生成
			look.disp_choices()																																	# 自分と相手の手を格納
			endFlag =  look.jadge(jankenResult[1])																							# あっち向いてホイの判定処理＆終了フラグを格納
		else																																									# 選択肢が範囲外の場合
			puts "\n--------------------------------------------------\n"												# 区切り表示
			endFlag = true																																			# 終了フラグをtrueにする
		end
	else																																										# じゃんけんの勝敗がついていない場合
		endFlag = true																																				# 強制的に終了フラグをtrueにする
	end
end

puts "\nじゃんけんを終了します"																														# じゃんけんの終了を表示
puts "\n--------------------------------------------------"																# 区切り表示